" Add shortcut for CtrlP when using vim in the terminal
nmap <Leader>t :CtrlP<CR>

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" Have CtrlP always open in the current window, turning
" off the default behavior of avoiding windows created
" by another plugin like NERDtree
"
" https://github.com/carlhuda/janus/issues/404
" https://github.com/kien/ctrlp.vim/issues/28
let g:ctrlp_dont_split = 'netrw'

filetype off

" Turn on syntax highlighting.
syntax enable
" Turn on file type detection.
filetype plugin indent on

" Display incomplete commands.
set showcmd
" Display the mode you're in.
set showmode

" Intuitive backspacing.
set backspace=indent,eol,start

" Handle multiple buffers better.
set hidden

" Enhanced command line completion.
set wildmenu
" Complete files like a shell.
set wildmode=list:longest

" Show line numbers.
set number
" Show cursor position.
set ruler

" Highlight matches as you type.
set incsearch
" Highlight matches.
set hlsearch
" Case-insensitive searching.
set ignorecase
" But case-sensitive if expression contains a capital letter.
set smartcase

" Turn on line wrapping.
set wrap
" Show 3 lines of context around the cursor.
set scrolloff=3

" Set the terminal's title
set title

" No beeping.
set visualbell

" Don't make a backup before overwriting a file.
set nobackup
set nowritebackup

" Global tab width.
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Show the status line all the time
set laststatus=2

" Tab mappings.
map <leader>to :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
" map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" map z !} sed -f ~/script/bar.sed
map tablize !} sed -e 's/	/ \| /g' \| sed -e 's/^/\| /g' \| sed -e 's/$/ \|/g'

" Sane searching
nnoremap / /\v
vnoremap / /\v
set gdefault
set showmatch
nnoremap <tab> %
vnoremap <tab> %

" Clear search results
nnoremap <leader><space> :noh<cr>

" Show invisibles
" set list listchars=tab:▸\ ,eol:¬,trail:·
set list listchars=tab:▸\ ,trail:·

" Ack a lot (the trailing space makes this nicer to use)
nnoremap <leader>a :Ack 

" Navigating splits
nnoremap <leader>w <C-w>v<C-w>l
" nnoremap <leader>s <C-w>s<C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Custom remote save command
map <leader>rs :w \|! remote_save %:p<cr>

" JSON syntax highlighting
au BufRead,BufNewFile *.json set filetype=json

" Turn off auto-indention
map ni :set invai<cr>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" For Textmate style indention
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

" Configure spell checking
nmap <silent> <leader>s :set spell!<CR>
set spelllang=en_us

" For the MakeGreen plugin and Ruby RSpec. Uncomment to use.
" autocmd BufNewFile,BufRead *_spec.rb compiler rspec

" Add recently accessed projects menu (project plugin)
set viminfo^=!

" Show hide NERDTree
nmap <silent> <c-n> :NERDTreeToggle<CR>

" Gist setup
let g:gist_clip_command = 'pbcopy'
let g:gist_open_browser_after_post = 1

" Command-T setting
let g:CommandTMaxFiles=20000

" Strip whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s*$//
    call cursor(l, c)
endfun

command -nargs=0 Stripwhitespace :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.feature,*.rb,*.php,*.rake,*.pl,*.pm,*.css,*.scss,*.js,*.coffee,*.erb Stripwhitespace

set timeoutlen=250

" Tabularize for aligning things
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" lining up equal signs and colons with tabularize
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>

" gundo:  http://sjl.bitbucket.org/gundo.vim/
" View the change history as a tree with preview
nnoremap <F5> :GundoToggle<CR>
let g:gundo_preview_bottom = 1 " tree on side, preview on bottom

" Tells rooter plugin to use :lcd instead of :cd
let g:rooter_use_lcd = 1

" Turn off JSLint errors per file
let g:JSLintHighlightErrorLine = 0

" ignore files in the tmp folder in CTRL_P plugin
set wildignore+=*/tmp/*

func! WordProcessorMode()
  map j gj
  map k gk
  setlocal spell spelllang=en_us
  setlocal nonumber
  setlocal nolist
  setlocal wrap
  setlocal linebreak
endfu
com! WP call WordProcessorMode()

" Send all vim registers to the mac clipboard
set clipboard=unnamed

" To spell check all git commit messages
au BufNewFile,BufRead COMMIT_EDITMSG set spell

" Include user's local vim config
if filereadable(expand("~/.dotfiles/users/$USER/vimrc"))
  source ~/.dotfiles/users/$USER/vimrc
endif
